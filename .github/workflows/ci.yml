name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

defaults:
  run:
    shell: bash --noprofile --norc -CeEuxo pipefail {0}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  tidy:
    uses: taiki-e/github-actions/.github/workflows/tidy.yml@main
    permissions:
      contents: read
      pull-requests: write # for gh pr edit --add-assignee
      repository-projects: read # for gh pr edit --add-assignee
    secrets: inherit

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          # NB: Sync list with https://github.com/taiki-e/checkout-action/blob/HEAD/.github/workflows/ci.yml
          - os: ubuntu-22.04
          - os: ubuntu-22.04-arm
          - os: ubuntu-24.04
          - os: ubuntu-24.04-arm
          - os: ubuntu-22.04
            tool1: cargo-hack@0.5.24
            tool2: cargo-llvm-cov@0.5.3
          - os: ubuntu-22.04
            tool1: cargo-hack@0.5
            tool2: cargo-llvm-cov@0.4
          - os: macos-13
          - os: macos-14
          - os: macos-15
          - os: windows-2022
          - os: windows-2022
            bash: msys64
          - os: windows-2022
            bash: cygwin
          - os: windows-2025
          - os: windows-2025
            bash: msys64
          - os: windows-2025
            bash: cygwin
          - os: windows-11-arm
          - os: windows-2022
            tool1: cargo-hack@0.5.24
            tool2: cargo-llvm-cov@0.5.3
          - os: windows-2022
            tool1: cargo-hack@0.5
            tool2: cargo-llvm-cov@0.4
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - run: |
          printf '%s\n' 'C:\msys64\mingw32\bin' >>"${GITHUB_PATH}"
          printf '%s\n' 'C:\msys64\usr\bin' >>"${GITHUB_PATH}"
        if: matrix.bash == 'msys64'
      - run: |
          choco install --no-progress --requirechecksums cygwin
          printf '%s\n' 'C:\tools\cygwin\bin' >>"${GITHUB_PATH}"
          printf '%s\n' 'C:\tools\cygwin\usr\bin' >>"${GITHUB_PATH}"
        if: matrix.bash == 'cygwin'
      - uses: taiki-e/checkout-action@v1
      - uses: taiki-e/github-actions/install-rust@stable
      - uses: ./
        with:
          tool: ${{ matrix.tool1 || 'cargo-hack' }}
          locked: false
      - run: cargo hack --version
      - uses: ./
        with:
          tool: ${{ matrix.tool2 || 'cargo-llvm-cov' }}
      - uses: ./
        with:
          tool: parse-changelog
          git: https://github.com/taiki-e/parse-changelog
          rev: d231414
      - run: parse-changelog --version
      - uses: ./
        with:
          tool: cargo-minimal-versions
          git: https://github.com/taiki-e/cargo-minimal-versions
          tag: v0.1.19
      - run: cargo minimal-versions --version
      # Test all shells listed in https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
      - name: Test bash
        run: cargo llvm-cov --version
        shell: bash
      - name: Test sh
        run: cargo llvm-cov --version
        shell: sh
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos')
      - name: Test pwsh
        run: cargo llvm-cov --version
        shell: pwsh
      - name: Test powershell
        run: cargo llvm-cov --version
        shell: powershell
        if: startsWith(matrix.os, 'windows')
      - name: Test cmd
        run: cargo llvm-cov --version
        shell: cmd
        if: startsWith(matrix.os, 'windows')

  test-container:
    strategy:
      fail-fast: false
      matrix:
        container:
          # NB: Sync list with https://github.com/taiki-e/checkout-action/blob/HEAD/.github/workflows/ci.yml
          # - ubuntu:14.04 # glibc 2.19 # https://github.com/actions/runner/issues/2906
          # - ubuntu:16.04 # glibc 2.23 # https://github.com/actions/runner/issues/2906
          # - ubuntu:18.04 # glibc 2.27 # https://github.com/actions/runner/issues/2906
          - ubuntu:20.04 # glibc 2.31
          - ubuntu:22.04 # glibc 2.35
          - ubuntu:24.04 # glibc 2.39
          # - debian:9-slim # glibc 2.24 # https://github.com/actions/runner/issues/2906
          - debian:10-slim # glibc 2.28
          - debian:11-slim # glibc 2.31
          - debian:12-slim # glibc 2.36
          - fedora:latest # glibc 2.39 (as of fedora 40)
          - almalinux:8 # glibc 2.28
          - almalinux:8-minimal # glibc 2.28
          - almalinux:9 # glibc 2.34
          - almalinux:9-minimal # glibc 2.34
          # - centos:6 # glibc 2.12 # https://github.com/actions/runner/issues/2906
          # - centos:7 # glibc 2.17 # https://github.com/actions/runner/issues/2906
          # - opensuse/leap:latest # glibc 2.38 (as of leap 15.6)
          # - opensuse/tumbleweed:latest # glibc 2.39 (as of 2024-07-19)
          - archlinux:latest # glibc 2.39 (as of 2024-07-19)
          - alpine:latest # musl 1.2.5 (as of alpine 3.20)
          # - openwrt/rootfs:x86-64-openwrt-24.10 # musl 1.2.5
    runs-on: ubuntu-latest
    timeout-minutes: 60
    container: ${{ matrix.container }}
    steps:
      - name: Install requirements (ubuntu/debian)
        run: |
          apt-get -o Acquire::Retries=10 -qq update
          apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends ca-certificates curl gcc libc6-dev
        if: startsWith(matrix.container, 'ubuntu') || startsWith(matrix.container, 'debian')
      - name: Install requirements (fedora/almalinux)
        run: |
          if type -P dnf >/dev/null; then
            dnf install -y gcc
          elif type -P microdnf >/dev/null; then
            microdnf install -y gcc
          else
            yum install -y gcc
          fi
        if: startsWith(matrix.container, 'fedora') || startsWith(matrix.container, 'almalinux')
      - name: Install requirements (archlinux)
        run: pacman -Sy --noconfirm gcc
        if: startsWith(matrix.container, 'archlinux')
      - name: Install requirements (alpine)
        run: apk --no-cache add cargo
        shell: sh
        if: startsWith(matrix.container, 'alpine')
      - uses: taiki-e/github-actions/install-rust@stable
        if: startsWith(matrix.container, 'ubuntu') || startsWith(matrix.container, 'debian') || startsWith(matrix.container, 'fedora') || startsWith(matrix.container, 'almalinux') || startsWith(matrix.container, 'archlinux')
      - run: apt-get -qq -o Dpkg::Use-Pty=0 remove -y curl
        if: startsWith(matrix.container, 'ubuntu') || startsWith(matrix.container, 'debian')
      - uses: taiki-e/checkout-action@v1
      # remove bash installed by checkout-action
      - run: apk --no-cache del bash
        shell: sh
        if: startsWith(matrix.container, 'alpine')
      - uses: ./
        with:
          tool: cargo-hack
          locked: false
      - run: cargo hack --version
      - uses: ./
        with:
          tool: cargo-llvm-cov
      - run: cargo llvm-cov --version
